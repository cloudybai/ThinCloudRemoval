#!/usr/bin/python3
# coding:utf-8

"""
    Author: Xie Song
    Email: 18406508513@163.com

    Copyright: Xie Song
    License: MIT
"""
import os

# from lib.dataset.landsat_8_dataloader import Get_dataloader
from lib.dataset.dataloader import Get_dataloader
from lib.dataset.dataloader import Get_dataloader_RGB

from lib.model.create_generator import create_generator
from lib.model.create_discriminater import create_discriminator
from lib.model.generator.ms_net import MS_Net
from lib.model.generator.msa_net import MSA_Net
from lib.model.generator.rsc_net import RSC_Net
from lib.model.generator.ssa_net import SSA_Net
from lib.model.generator.unet import UNet
from lib.model.generator.ss_net import SS_Net
from lib.model.generator.pix2pixhd import Pix2pixhd
from lib.model.generator.multi_pix2pix import Multi_pix2pix
from lib.model.generator.u2net import U2NET
from lib.model.generator.RSAUnet import RSAUNet
from lib.model.generator.SPANet import SPANet
from lib.model.generator.SPANet import SPNet
from lib.model.generator.SPANet import NoRNet

from lib.model.generator.multi_SPANet import Multi_SPANet,Multi3_SPANet
from lib.model.generator.cloudGan_gen import GeneratorResNet
from lib.model.discriminator.cloudGan_dis import Discriminator_n_layers
from lib.optimizer.Adam_optimizer import get_adam_optimizer
from lib.optimizer.Adam_optimizer import get_adam_optimizer_chain

from lib.optimizer.SGD_optimizer import get_sgd_optimizer
from lib.utils.config import Config
from lib.utils.parse_args import parse_args
from rm_cloud.gan_methods.u2netGAN_trainer import u2netGANTrainer
from rm_cloud.single_model_methods.spanet_trainer import SPANetTrainer
from rm_cloud.single_model_methods.ms_trainer import MsTrainer
from rm_cloud.single_model_methods.msa__trainer import Msa_Trainer
from rm_cloud.single_model_methods.msa_trainer import MsaTrainer
from rm_cloud.single_model_methods.rsc_trainer import RscTrainer
from rm_cloud.single_model_methods.ssa_trainer import SsaTrainer
from rm_cloud.single_model_methods.ss_trainer import SsTrainer
from rm_cloud.single_model_methods.unet_trainer import UnetTrainer
from rm_cloud.single_model_methods.u2net_trainer import U2netTrainer
from rm_cloud.single_model_methods.rsaunet_trainer import RSAUNetTrainer
from rm_cloud.single_model_methods.multi_spanet_trainer import MultiSPANetTrainer

from rm_cloud.single_model_methods.pix2pixhd_trainer import Pix2pixhdTrainer
from rm_cloud.single_model_methods.multi_pix2pix_trainer import Multi_pix2pixTrainer

def train():
    config = Config().parse()
    args = parse_args(config)
    print(args)
    os.environ['CUDA_VISIBLE_DEVICES'] = args.devices
    if args.in_channels == 9:
        train_loader,test_loader = Get_dataloader(args)
    else:
        train_loader, test_loader = Get_dataloader_RGB(args)

    if args.model.arch == 'rsc':
        rsc = RSC_Net()
        model = create_generator(args, rsc)
        # adm_optimizer = get_adam_optimizer(args, model)
        # rsc = RscTrainer(model, adm_optimizer)
        sgd_optimizer = get_sgd_optimizer(args, model)
        rsc = RscTrainer(model, sgd_optimizer)
        rsc.train_single(args, train_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'ss':
        ss = SS_Net()
        model = create_generator(args, ss)
        # sgd_optimizer = get_sgd_optimizer(args, model)
        # ss = SsTrainer(model, sgd_optimizer)
        adm_optimizer = get_adam_optimizer(args, model)
        ss = SsTrainer(model, adm_optimizer)
        ss.train_single(args, train_loader, args.start_epoch, args.end_epoch)


    if args.model.arch == 'rsaunet':
        rsaunet = RSAUNet()
        model = create_generator(args, rsaunet)
        # adm_optimizer = get_adam_optimizer(args, model)
        # rsaunet = RSAUNetTrainer(model, adm_optimizer)

        sgd_optimizer = get_sgd_optimizer(args, model)
        rsaunet =RSAUNetTrainer(model, sgd_optimizer)

        rsaunet.train_single(args, train_loader, args.start_epoch, args.end_epoch)


    if args.model.arch == 'unet':
        unet = UNet()
        model = create_generator(args, unet)
        adm_optimizer = get_adam_optimizer(args, model)
        unet = UnetTrainer(model, adm_optimizer)
        unet.train_single(args, train_loader, test_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'u2net':
        u2net = U2NET(in_ch=9, out_ch=9)
        model = create_generator(args, u2net)
        adm_optimizer = get_adam_optimizer(args, model)
        u2net = U2netTrainer(model, adm_optimizer)
        u2net.train_u2net(args, train_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'spanet':
        spanet = SPANet()
        model = create_generator(args, spanet)
        adm_optimizer = get_adam_optimizer(args, model)
        spanet = SPANetTrainer(model, adm_optimizer)
        spanet.train_single(args, train_loader,test_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'spnet':
        spnet = SPNet()
        model = create_generator(args, spnet)
        adm_optimizer = get_adam_optimizer(args, model)
        spnet = SPANetTrainer(model, adm_optimizer)
        spnet.train_single(args, train_loader,test_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'NoRNet':
        norsnet = NoRNet()
        model = create_generator(args, norsnet)
        adm_optimizer = get_adam_optimizer(args, model)
        norsnet = SPANetTrainer(model, adm_optimizer)
        norsnet.train_single(args, train_loader,test_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'Multi_SPANet':
        multi_spanet = Multi_SPANet()
        model = create_generator(args, multi_spanet)
        adm_optimizer = get_adam_optimizer(args, model)
        multi_spanet = MultiSPANetTrainer(model, adm_optimizer)
        multi_spanet.train_multi(args, train_loader, test_loader, args.start_epoch, args.end_epoch)


    if args.model.arch == 'Multi3_SPANet':
        multi3_spanet = Multi3_SPANet()
        model = create_generator(args, multi3_spanet)
        adm_optimizer = get_adam_optimizer(args, model)
        multi3_spanet = MultiSPANetTrainer(model, adm_optimizer)
        multi3_spanet.train_multi(args, train_loader, test_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'pix2pixhd':
        pix2pixhd = Pix2pixhd()
        model = create_generator(args, pix2pixhd)
        adm_optimizer = get_adam_optimizer(args, model)
        pix2pixhd = Pix2pixhdTrainer(model, adm_optimizer)
        pix2pixhd.train_single(args, train_loader, args.start_epoch, args.end_epoch)



    if args.model.arch == 'multi_pix2pix':

        multi_pix2pix = Multi_pix2pix()
        model = create_generator(args, multi_pix2pix)
        adm_optimizer = get_adam_optimizer(args, model)
        multi_pix2pix = Multi_pix2pixTrainer(model, adm_optimizer)
        multi_pix2pix.train_multi_2(args, train_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'msa':

        msa = MSA_Net()
        model = create_generator(args, msa)
        adm_optimizer = get_adam_optimizer(args, model)
        msa = MsaTrainer(model, adm_optimizer)
        msa.train_multi(args, train_loader, args.start_epoch, args.end_epoch)

    if args.model.arch == 'ssa':
        ssa = SSA_Net()
        model = create_generator(args, ssa)
        adm_optimizer = get_adam_optimizer(args, model)
        ssa = SsaTrainer(model, adm_optimizer)
        ssa.train_single(args, train_loader, args.start_epoch, args.end_epoch)



    if args.model.arch == 'msa_':
        msa = MSA_Net()
        model = create_generator(args, msa)
        adm_optimizer = get_adam_optimizer(args, model)
        ms = Msa_Trainer(model, adm_optimizer)
        ms.train_multi(args, train_loader, args.start_epoch, args.end_epoch)


    if args.model.arch == 'ms':
        ms = MS_Net()
        model = create_generator(args, ms)
        adm_optimizer = get_adam_optimizer(args, model)
        ms = MsTrainer(model, adm_optimizer)
        ms.train_multi(args, train_loader, args.start_epoch, args.end_epoch)


    if args.model.arch == 'u2net_GAN':
        u2netGAN_G = U2NET(in_ch=9,out_ch=9)
        u2netGAN_G = create_generator(args,u2netGAN_G)

        u2netGAN_D = Discriminator_n_layers(args)
        u2netGAN_D = create_discriminator(args,u2netGAN_D)

        opt_gen = get_adam_optimizer(args, u2netGAN_G)
        opt_dis = get_adam_optimizer(args, u2netGAN_D)

        u2netGAN = u2netGANTrainer(u2netGAN_G,u2netGAN_D,opt_gen,opt_dis)
        u2netGAN.train(args, train_loader,test_loader, args.start_epoch, args.end_epoch) # 9 channel





if __name__ == '__main__':
    train()

